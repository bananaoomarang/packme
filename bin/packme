#!/usr/bin/env node

'use strict';

var Path        = require('path');
var Fs          = require('fs');
var Bluebird    = require('bluebird');
var MkdirpAsync = Bluebird.promisify(require('mkdirp'));

Bluebird.promisifyAll(Fs);

var IO_DIR = process.env.PACKME_IO_DIR || '../ios';

var argv = require('yargs')
  .usage('Usage: packme <package> <infrom> <outto>')
  .demand(3)
  .argv;

var pkg    = argv._[0];
var infrom = argv._[1];
var outto  = argv._[2];

var pkgdir  = Path.join(process.cwd(), pkg);

var _in = require(Path.join(IO_DIR, infrom)).i
var out = require(Path.join(IO_DIR, outto)).o;

var pkgCache = {};

function main(pkgname, i, o) {
    var prefixedPkgname = [infrom, pkgname].join('-');

    return i(pkgname)
        .tap(function (transPKG) {
            //XXX This code ignores versions

            var depends  = Object.keys(transPKG.depends);
            var prefixed = depends.map(function (dep) { return [infrom, dep].join('-'); });

            transPKG.pkgname = prefixedPkgname;
            transPKG.depends = prefixed;

            return Bluebird.all(
                prefixed
                  .map(function (dep, index) {
                      if(pkgCache[dep])
                          return dep;

                      pkgCache[dep] = true;

                      return main(depends[index], i, o);
                  })
            );
        })
        .then(function (transPKG) {
            return MkdirpAsync(prefixedPkgname)
                .return(o(transPKG))
                .then(function (result) {
                    return Bluebird.all(Object.keys(result))
                        .map(function (key) {
                            return Fs.writeFileAsync(prefixedPkgname + '/' + key, result[key]);
                        });
                });
        });
}

main(pkg, _in, out);

